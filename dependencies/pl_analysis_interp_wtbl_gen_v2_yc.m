function wtbl_n = pl_analysis_interp_wtbl_gen_v2_yc(ftbl_n,wtbl_n,numnans,ABP_or_Dbfit_wv)
% This code extracts the actual ABP and BFI data between the start and end times generated by window_abp_dcs.
% The windows are then set up for pulse extraction in the next step.
% ABP will be used as the reference to extract pulses from the BFI.
% However, flow readings have a characteristic shift causing them to lead
% pressure. This shift must be accounted for. Xcorr is used between BFI/ABP
% data. ABP data has been resampled/downsampled to the BFI time axis.
% signal 

    w_a = table();
    windows = height(wtbl_n);
    wtests = {};
    wresult = {};
    test = [];
    
    %%%% 125 Hz %%%%%
    % Interpolated to 125 Hz axis. Abp_interp is just abp.
    t_interp = ftbl_n.t_bfi_interp{:}; 
    bfi_interp = ftbl_n.bfi_interp{:};  
    abp_interp = ftbl_n.abp_binterp{:}; 
    
    %%%% 20 Hz %%%%%
    t = ftbl_n.t_bfi{:};
    bfi = ftbl_n.bfi{:};
    abp = ftbl_n.abp_downsample{:};
    for w = 1:windows
        
        % The start and end of window w
        wstart = wtbl_n{w,'wstart'};
        wend = wtbl_n{w,'wend'};
        
        % The time, BFI, and ABP data for this window - sampled at 20hz.
        % This will be used for xcorr
        wt = t(find(t==wstart):find(t==wend));
        wbfi = bfi(find(t==wstart):find(t==wend));
        wabp = abp(find(t==wstart):find(t==wend));
        
        % We also window ABP at full temporal resolution, this will be used
        % for ABP pulse averaging.
        wt_interp = t_interp(wstart<=t_interp & t_interp<=wend);
        wbfi_interp = bfi_interp(wstart<=t_interp & t_interp<=wend); % BFI interpolated to ABP axis is not used in final code.
        wabp_interp = abp_interp(wstart<=t_interp & t_interp<=wend);

        %%%%%%%%%%%% WINDOW QUALITY CONTROL %%%%%%%%%%%%%%%%%
        % Flags data with NaNs
        if strcmp(ABP_or_Dbfit_wv, 'ABP')  
            [wtests,wresult,wbfi,wabp,Fratio,test(w),discard_reason]...
             = window_test_generalized4_yc(wbfi,wabp,wt,numnans,'ABP');
        else 
            [wtests,wresult,wbfi,wabp,Fratio,test(w),discard_reason]...
             = window_test_generalized4_yc(wbfi,wabp,wt,numnans,'Dbfit_wv');
        end

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        test_result = [wtests',num2cell(wresult)'];
%%
    
        if ~test(w)

            c = NaN;
            lags = NaN;
            shift_maxcorr = NaN;
            tshift_maxcorr = NaN;
            maxcorr = NaN;
        else
            if strfind(ftbl_n.corr_method{:},'xcorr')
                % Xcorr lag calculation
                [c,lags] = xcorr(wabp,wbfi,'normalized');
                shift_maxcorr = lags(c==max(c));
                if length(shift_maxcorr) >1
                    disp('multiple shift values')
                end
                tshift_maxcorr = shift_maxcorr * mean(diff(t));
                maxcorr = max(c);                
            elseif strfind(ftbl_n.corr_method{:},'corrcoef')
            % Corrcoef (added in October 2021)
                [c,lags] = corrcoef_windows(wabp,wbfi);
                shift_maxcorr = lags(c==max(c));
                tshift_maxcorr = shift_maxcorr * mean(diff(t));
                maxcorr = max(c);  
            end

        end

        if test(w)
            fprintf('Extracting peaks...\n')
        % Identify pulses in abp signal, these will be used to extract BFI
        % pulses
        %%%%%%%%%% Identify peaks with delineator %%%%%%%%%%%%
            peaks = getpeaks3(wabp_interp,ftbl_n.fs_abp);
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        else
            fprintf('test(w) is 0\n')
            peaks = struct();
        end
            % Add data to table
        w_a_dat = [{w},{{test_result}},{wt},{wbfi},{wabp},...
            {discard_reason},{shift_maxcorr},{tshift_maxcorr}, {maxcorr},...
            {wt_interp},{wabp_interp},{Fratio},{{peaks}},{ftbl_n.corr_method{:}}];
        w_a_names = {'wnum','window_tests','wt','wbfi','wabp',...
            'discard_reason','shift_maxcorr','tshift_maxcorr', 'maxcorr',...
            'wt_125hz','wabp_125hz','Fratio','peaks','corr_method'};
        w_a_dat = cell2table(w_a_dat);
        w_a_dat.Properties.VariableNames = w_a_names;

        if any(string(ftbl_n.Properties.VariableNames) == "sds")
            sds = ftbl_n.sds;
            sds = repmat({sds},height(w_a_dat),1);
            tmp = cell2table(sds);
            w_a_dat = [tmp, w_a_dat];
        end
        try
            w_a = [w_a ; w_a_dat];
        catch
            error('w_a error')
        end

    end
    wtemp = wtbl_n;
    w_passed = cell2table(num2cell(test'),'VariableNames',"passed_window_tests");
    wtbl_n = [w_passed, wtbl_n,w_a];

end